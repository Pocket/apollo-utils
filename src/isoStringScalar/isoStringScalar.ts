import { GraphQLScalarType, Kind } from 'graphql';
import { isValid, parseISO, toDate } from 'date-fns';
import {
  InternalServerError,
  UserInputError,
} from '../errorHandler/errorHandler';

export const isoStringScalar = new GraphQLScalarType({
  name: 'ISOString',
  description: 'ISOString custom scalar type',

  /**
   * Converts server-side TS Date representation to a JSON-compatible, ISO-8601-compliant
   * UTC Datetime String for Apollo Server to include in an operation response.
   *
   * @param value - TS Date Object as generated by Data Store Client & validated by mysqlDateConvert.
   * @returns ISO-8601-compliant, UTC-based Datetime String.
   */
  serialize(value: Date | null): string | null {
    if (value === null) {
      return null;
    }

    if (value instanceof Date && isNaN(value.valueOf())) {
      throw new InternalServerError(
        'Invalid Data Store Response: invalid Date object'
      );
    }

    if (value instanceof Date) {
      // toISOString() is always zero UTC offset per
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
      const resp: string = value.toISOString();
      return resp;
    }

    throw new InternalServerError(
      'GraphQL ISOString Scalar serializer expected a `Date` object or null'
    );
  },

  /**
   * Converts the scalar's JSON value to its back-end representation
   * before it's added to a resolver's args.
   *
   * @param value - ISO-8601-compliant Datetime String.
   * @returns TS Data Object for interacting with Data Store via Client.
   */
  parseValue(value: string | null): Date | null {
    if (value === null || value === '') {
      return null;
    }

    if (typeof value === 'string') {
      const dt = parseISO(value);

      if (!isValid(dt)) {
        throw new UserInputError(
          'Invalid User Input: ISOString Scalar parse expected a ISO-8601-compliant string'
        );
      }

      return toDate(dt);
    }

    throw new UserInputError(
      'Invalid User Input: ISOString Scalar parse expected a value of type string or null'
    );
  },

  /**
   * Converts the value's AST representation to the scalar's back-end representation.
   *
   * @param ast - AST Representation of ISOString.
   * @returns TS Date Object.
   */
  parseLiteral(ast): Date | null {
    if (ast.kind === Kind.STRING) {
      return this.parseValue(ast.value);
    }

    throw new UserInputError(
      'Invalid User Input: ISOString Scalar parse expected a value of type string or null'
    );
  },
});
